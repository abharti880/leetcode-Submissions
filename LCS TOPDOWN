/* Dynamic Programming C++ implementation of LCS problem */
#include<bits/stdc++.h>
using namespace std;

//int max(int a, int b);
//int t[1001][1001];
/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *x, char *y, int m, int n )
{
	int t[m+1][n+1];
	for(int i = 0;i<m+1;i++)
	{
	    for(int j =0;j<n+1;j++)
	    {
	        if(i ==0 || j == 0) t[i][j] = 0;
	    }
	}
	
	for(int i = 1;i<m+1;i++)
	{
	    for(int j =1;j<n+1;j++)
	    {
	        if(x[i-1] == y[j-1])
	        t[i][j] = 1+ t[i-1][j-1];
	        else
	        t[i][j] = max(t[i-1][j] , t[i][j-1]);
	    }
	}
    
    return t[m][n];
}

/* Utility function to get max of 2 integers */
int max(int a, int b)
{
	return (a > b)? a : b;
}

// Driver Code
int main()
{
	char X[] = "AGGTAB";
	char Y[] = "GXTXAYB";
	
	int m = strlen(X);
	int n = strlen(Y);
	//memset(t,-1,sizeof(t));
	cout << "Length of LCS is "
		<< lcs( X, Y, m, n );
	
	return 0;
}

// This code is contributed by rathbhupendra
