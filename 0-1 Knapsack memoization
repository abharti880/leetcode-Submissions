#include <bits/stdc++.h>
using namespace std;

const int D = 1000;

int t[D][D];

int Knapsack(int wt[], int val[], int W, int n) {

	if (n == 0 || W == 0)
		return 0;

	if (t[n][W] != -1)
		return t[n][W];

		if (wt[n - 1] <= W)
			t[n][W] = max(val[n - 1] + Knapsack(wt, val, W - wt[n - 1], n - 1), Knapsack(wt, val, W, n - 1));
		else if (wt[n - 1] > W)
			t[n][W] = Knapsack(wt, val, W, n - 1);

		return t[n][W];

}

int main() {
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
     memset(t,-1,sizeof(t));
    cout << Knapsack(wt, val, W, n);
     
    return 0;
}
