/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* thead = new ListNode(-1);
        ListNode* head = thead;
         int sum=0;
        int carry=0;
        int res=0;
        int count=0;
        int currsum=0;

        while(l1!=NULL && l2!=NULL)
            {
            currsum =  (l1->val)+(l2->val)+carry;
            
            sum = (currsum)%10;
            res =  sum;
            carry = (currsum)/10;
            
            
            thead->next = new ListNode(res);
            thead = thead->next;
            l1 = l1->next;
            l2 = l2->next;
            }
        while(l1!=NULL || l2!=NULL)
        {
            if(l1!=NULL)
            {
                 currsum = l1->val+carry;
                 carry = (currsum/10);
                 sum = (currsum%10);
                 thead->next=new ListNode(sum);
                 l1 = l1->next;
                 thead = thead->next;
            }
            if(l2!=NULL)
            {
                 currsum = l2->val+carry;               
                 carry = (currsum/10);
                 sum = (currsum%10);
                 thead->next=new ListNode(sum);
                 res = res + sum;
                 l2 = l2->next;
                 thead = thead->next;
            }
            
        }
        if(currsum>9 && carry>0)
        {thead->next=new ListNode(carry);
         thead=thead->next;
        }
        
       return head->next;
        
    }
};
